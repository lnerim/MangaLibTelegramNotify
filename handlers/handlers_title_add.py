import logging

from aiogram import Router, Bot
from aiogram.enums import ParseMode
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.media_group import MediaGroupBuilder

from api.enum import SITES, TitleInfo
from api.enum.callback import SearchTitle, TitleData
from api.requests import search, more_info
from bot_utils import db_new
from bot_utils.states import Search
from handlers import delete_messages

router = Router()


@router.message(StateFilter(None), Command(commands="new"))
@delete_messages
async def cmd_new(message: Message, state: FSMContext, to_delete: list):
    keyboard_new: InlineKeyboardMarkup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=site.name, callback_data=SearchTitle(site_id=site.site_id).pack())]
            for site in SITES.values()
        ]
    )
    await state.set_state(Search.wait_site)
    d_msg = await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–π—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π—Ç–ª–∞\n–û—Ç–º–µ–Ω–∞ - /cancel", reply_markup=keyboard_new)
    to_delete.append(d_msg)


@router.callback_query(Search.wait_site, SearchTitle.filter())
@delete_messages
async def callback_search(callback: CallbackQuery, state: FSMContext, to_delete: list):
    data: SearchTitle = SearchTitle.unpack(callback.data)
    await state.set_state(Search.wait_input)
    await state.update_data(site_id=data.site_id)
    await callback.answer()
    d_msg = await callback.message.answer("üìå –•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è...\n–û—Ç–º–µ–Ω–∞ - /cancel")
    to_delete.append(d_msg)


@router.message(Search.wait_input)
@delete_messages
async def search_input(message: Message, state: FSMContext, to_delete: list):
    data = await state.get_data()
    site_id = data["site_id"]
    search_text = message.text

    search_msg = await message.answer("üîç –ü–æ–∏—Å–∫...")

    try:
        search_data = await search(site_id, search_text)
    except Exception as e:
        await message.answer("üîç –ü–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...")
        logging.exception(e)
        return
    finally:
        await search_msg.delete()

    if not search_data:
        research = await message.answer("üîç –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ, "
                                        "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑...\n"
                                        "–û—Ç–º–µ–Ω–∞ - /cancel")
        to_delete.append(research)
        await state.set_state(Search.wait_input)
        return

    album = MediaGroupBuilder()
    keyboard_input: list[list[InlineKeyboardButton]] = []

    slugs: dict[int, str] = dict()
    names: dict[int, str] = dict()
    for num, title in enumerate(search_data[:10]):
        slugs[title.title_id] = title.slug
        names[title.title_id] = title.rus_name or title.name
        album.add_photo(media=title.picture)
        keyboard_input.append([
            InlineKeyboardButton(
                text=title.rus_name or title.name,
                callback_data=TitleData(title_id=title.title_id, site_id=site_id).pack())
        ])

    await state.update_data(slugs=slugs)
    await state.update_data(names=names)

    album_messages: list[Message] = await message.answer_media_group(media=album.build())
    d_msg = await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π\n–û—Ç–º–µ–Ω–∞ - /cancel",
                                 reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_input))

    await state.set_state(Search.choose_title)

    to_delete.append(d_msg)
    to_delete += album_messages


@router.callback_query(Search.choose_title)
@delete_messages
async def choose_title(callback: CallbackQuery, state: FSMContext, bot: Bot, to_delete: list):
    title_data: TitleData = TitleData.unpack(callback.data)
    state_data = await state.get_data()
    slug = state_data["slugs"][title_data.title_id]

    info_msg = await bot.send_message(callback.from_user.id, "–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
    try:
        t: TitleInfo = await more_info(title_data.site_id, slug)
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–π—Ç–ª–µ {title_data.site_id=} {slug}")
        logging.exception(e)
        await bot.send_message(callback.from_user.id, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑–≤–µ—Å—Ç–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –±–µ–∑ –ø–æ–∫–∞–∑–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        await add_title(callback, state, bot)
        return
    finally:
        await info_msg.delete()

    caption = f"<i>{t.rus_name or t.name}</i>\n"\
              f"<b>–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ:</b> {t.ageRestriction} <b>–†–µ–π—Ç–∏–Ω–≥:</b> {t.rating}\n"\
              f"<b>–¢–∏–ø:</b> {t.type}\n"\
              f"{t.releaseDateString} {t.status}\n"\
              f"<b>–ê–≤—Ç–æ—Ä—Å—Ç–≤–æ:</b> {', '.join(t.authors)}\n"\
              f"<b>–ñ–∞–Ω—Ä—ã:</b> {', '.join(t.genres)}\n"\
              f"<b>–¢–µ–≥–∏:</b> {', '.join(t.tags)}\n\n"

    len_to_summary = 1024 - len(caption) - 19
    summary = t.summary[:len_to_summary - 3] + "..." if len(t.summary) > len_to_summary else t.summary

    d_msg = await bot.send_photo(
        chat_id=callback.from_user.id,
        photo=t.picture,
        caption=caption + summary + f"\n\n–û—Ç–º–µ–Ω–∏—Ç—å: /cancel",  # cancel len = 19
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(
                    text="‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å",
                    callback_data=TitleData(title_id=t.title_id, site_id=title_data.site_id).pack())
            ]]
        )
    )
    to_delete.append(d_msg)

    await state.set_state(Search.add_title)


@router.callback_query(Search.add_title)
@delete_messages
async def add_title_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await add_title(callback, state, bot)


async def add_title(callback: CallbackQuery, state: FSMContext, bot: Bot):
    title_data: TitleData = TitleData.unpack(callback.data)
    name_data = await state.get_data()
    name = name_data["names"][title_data.title_id]

    await db_new.publication_add(callback.from_user.id, int(title_data.title_id), title_data.site_id, name)

    await bot.send_message(callback.from_user.id, "‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ /list")
